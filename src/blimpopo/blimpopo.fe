use std::context::Context

// SPDX-License-Identifier: MIT
//Copyright (c) 2023 edmiikk.eth
//Copyright (c) 2017-2023 OpenZeppelin
//
//import "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol";
//import "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol";
//import "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol";
//import "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol";
//import "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol";
//import "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol";
//import "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol";
//import "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20FlashMintUpgradeable.sol";
//import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
//import "../../utils/AddressUpgradeable.sol";
//
// ERC20 API
//function name() public view returns (string)
//function symbol() public view returns (string)
//function decimals() public view returns (uint8)
//function totalSupply() public view returns (uint256)
//function balanceOf(address _owner) public view returns (uint256 balance)
//function transfer(address _to, uint256 _value) public returns (bool success)
//function transferFrom(address _from, address _to, uint256 _value) public returns (bool success)
//function approve(address _spender, uint256 _value) public returns (bool success)
//function allowance(address _owner, address _spender) public view returns (uint256 remaining)
//*/

type bytes32 = u256 // ease conversion from Solidity

pub struct Initialized { // emitted after an initialize or re-initialize
    pub version: u8
}

// Access Control Upgradeable
//struct RoleData {
//    mapping(address => bool) members;
//    bytes32 adminRole;
//}
// see fields below for ported solution as 
    //members: Map<address,bool> // compile error: struct field type must have a fixed size


struct MissingRole {
    pub message: String<30>
    pub role: bytes32
    pub account: address
}

struct RoleGranted {
    pub role: u256 
    pub account: address
    pub sender: address
}

struct RoleRevoked {
    pub role: u256 
    pub account: address
    pub sender: address
}

struct RoleAdminChanged {
    pub role: bytes32 
    pub previous_admin_role: bytes32
    pub admin_role: bytes32
}


// event Transfer(address indexed from, address indexed to, uint256 value);
// emit this structure below

struct Transfer {
    #indexed
    pub from: address
    #indexed
    pub to: address
    pub value: u256
}

trait initializer {
        
}

pub contract BMP_Token {
    
    // Initializer fields
    SNAPSHOT_ROLE: u256 
    PAUSER_ROLE: u256
    MINTER_ROLE: u256
    _initialized: u8  // contract has been initialized.
    _initializing: bool // contract is in the process of being initialized

    // Pausable fields
    _paused: bool

    // Access Control Upgradeable
    
    // replace Solidity variable struct with specific role maps
    _snapshot_roles: Map<address, bool> ;
    _snapshot_admin_role: bytes32 ;
    _pauser_roles: Map<address, bool> ;
    _pauser_admin_role: bytes32 ;
    _minter_roles: Map<address, bool> ;
    _minter_admin_role: bytes32 ;
    _admin_roles: Map<address, bool> ;
    DEFAULT_ADMIN_ROLE: bytes32  ; //bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;
     //_adminRole: bytes32 ;
     
    // ERC20 fields
    _name: String<100>
    _symbol: String <3> 
    _balances: Map<address, u256>
    _totalSupply: u256

//library AddressUpgradeable {
//   /**
//     * @dev Returns true if `account` is a contract.
//     *
//     * [IMPORTANT]
//     * ====
//     * It is unsafe to assume that an address for which this function returns
//     * false is an externally-owned account (EOA) and not a contract.
//     *
//     * Among others, `isContract` will return false for the following
//     * types of addresses:
//     *
//     *  - an externally-owned account
//     *  - a contract in construction
//     *  - an address where a contract will be created
//     *  - an address where a contract lived, but was destroyed
//     * ====
//     *
//     * [IMPORTANT]
//     * ====
//     * You shouldn't rely on `isContract` to protect against flash loan attacks!
//     *
//     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
//     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
//     * constructor.
//     * ====
//     */
//    function isContract(address account) internal view returns (bool) {
//        // This method relies on extcodesize/address.code.length, which returns 0
//        // for contracts in construction, since the code is only stored at the end
//        // of the constructor execution.

//        return account.code.length > 0;
//    }
      fn _isContract(account: address) -> bool {
          // TODO return extcodesize(account) > 0 ;
        return false ;  // !
      }  
    
    pub fn __init__(mut self, mut ctx: Context) {
        // Roles here as FNYI
        self.DEFAULT_ADMIN_ROLE = 0x00;
        self._snapshot_admin_role = self.DEFAULT_ADMIN_ROLE ;
        self._pauser_admin_role = self.DEFAULT_ADMIN_ROLE ;
        self._minter_admin_role = self.DEFAULT_ADMIN_ROLE ;
        self.SNAPSHOT_ROLE = keccak256((53,53).abi_encode());
        self.PAUSER_ROLE = keccak256((50,50).abi_encode());        
        self.MINTER_ROLE = keccak256((48,48).abi_encode());  
        self._initializing = false ; // n.b. not in Sol constructor   
        self._initialized = 0 ;  // n.b. not in Sol constructor 
        self._disableInitializers(ctx);
    }
    
    
     // /**
     //* @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.
     //* Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized
     //* to any version. It is recommended to use this to lock implementation contracts that are designed to be called
     //* through proxies.
     //*
     //* Emits an {Initialized} event the first time it is successfully executed.
     //*/
    //function _disableInitializers() internal virtual {
    //    require(!_initializing, "Initializable: contract is initializing");
    //    if (_initialized < type(uint8).max) {
    //        _initialized = type(uint8).max;
    //        emit Initialized(type(uint8).max);
    //    }
    //}
    fn _disableInitializers(mut self, mut ctx: Context) {
        assert self._initializing == false, "Initializable: contract is initializing"
        if (self._initialized < 255) {
            self._initialized = 255;
            ctx.emit(Initialized(version: 255));
        }    
    }
    
    //modifier initializer() {
    //    bool isTopLevelCall = !_initializing;
    //    require(
    //        (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),
    //        "Initializable: contract is already initialized"
    //    );
    //    _initialized = 1;
    //    if (isTopLevelCall) {
    //        _initializing = true;
    //    }
    //    _;
    //    if (isTopLevelCall) {
    //        _initializing = false;
    //        emit Initialized(1);
    //    }
    //}
    

    
    
    fn _initializer(mut self, mut ctx: Context) {
        self._disableInitializers(ctx);
        let isTopLevelCall: bool = self._initializing == false;
        assert (isTopLevelCall and self._initialized < 1) or (_isContract(account: ctx.msg_sender()) and self._initialized == 1),"Initializable: contract is already initialized"
        self._initialized = 1;
        if (isTopLevelCall) {
            self._initializing = true;
        }
        if (isTopLevelCall) {
            self._initializing = false;
        }
    }
    
    
    //function initialize() initializer public {
    //    __ERC20_init("MyToken", "BMP");
    //    __ERC20Burnable_init();
    //    __ERC20Snapshot_init();
    //    __AccessControl_init();
    //    __Pausable_init();
    //    __ERC20Permit_init("MyToken");
    //    __ERC20Votes_init();
    //    __ERC20FlashMint_init();

    //    _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);
    //    _grantRole(SNAPSHOT_ROLE, msg.sender);
    //    _grantRole(PAUSER_ROLE, msg.sender);
    //    _mint(msg.sender, 404 * 10 ** decimals());
    //    _grantRole(MINTER_ROLE, msg.sender);
    //}
    
    pub fn initialize(mut self, mut ctx: Context) {
        self._initializer(ctx); // instead of a trait
        self._ERC20_init(ctx, name: "Blimpopo", symbol: "BMP");
        // self._ERC20Burnable_init(); // empty function
        // self._ERC20Snapshot_init() ; // empty function
        // self._AccessControl_init() ; // empty function
        self._Pausable_init() ;
        //self._ERC20Permit_init(name: "Blimpopo");  // empty function
        // self._ERC20Votes_init() // empty function
        // self._ERC20FlashMint_init() // empty function
        self._grant_role(ctx,role: self.DEFAULT_ADMIN_ROLE, account: ctx.msg_sender());
        self._grant_role(ctx,role: self.SNAPSHOT_ROLE, account: ctx.msg_sender());
        self._grant_role(ctx,role: self.PAUSER_ROLE, account: ctx.msg_sender());
        self._mint(ctx, account: ctx.msg_sender(), amount: 10000 );
        self._grant_role(ctx,role: self.MINTER_ROLE, account: ctx.msg_sender());
    }
    
    fn _ERC20_init(mut self, mut ctx: Context, name: String<100>, symbol: String<3>) {
        self._initializer(ctx); // modifier onlyInitializing
        self._name = name ;
        self._symbol = symbol ;
    }
        
    fn _Pausable_init(mut self) {
        self._paused = false;
    }    
        
    // /**
    // * @dev Grants `role` to `account`.
    // *
    // * Internal function without access restriction.
    // *
    // * May emit a {RoleGranted} event.
    // */
    //function _grantRole(bytes32 role, address account) internal virtual {
    //    if (!hasRole(role, account)) {
    //        _roles[role].members[account] = true;
    //        emit RoleGranted(role, account, _msgSender());
    //    }
    //}    
    pub fn grant_role(mut self, mut ctx: Context, role: bytes32, account: address) {
        assert self._has_role(role: self._get_role_admin(role), account: ctx.msg_sender()), "Missing admin role"
        self._grant_role(ctx, role, account) ;
    }
    
    fn _grant_role(mut self, mut ctx: Context, role: bytes32, account: address) {
        if (self._has_role(role,account) == false) {
            if (role == self.SNAPSHOT_ROLE) {
                self._snapshot_roles[account] = true;
                ctx.emit(RoleGranted(role: self.SNAPSHOT_ROLE, account, sender: ctx.msg_sender()));
            }
            if (role == self.PAUSER_ROLE) {
                self._pauser_roles[account] = true;
                ctx.emit(RoleGranted(role: self.PAUSER_ROLE, account, sender: ctx.msg_sender()));
            }
            if (role == self.MINTER_ROLE) {
                self._minter_roles[account] = true;
                ctx.emit(RoleGranted(role: self.MINTER_ROLE, account, sender: ctx.msg_sender()));
            }
            if (role == self.DEFAULT_ADMIN_ROLE) {
                self._admin_roles[account] = true;
                ctx.emit(RoleGranted(role: self.DEFAULT_ADMIN_ROLE, account, sender: ctx.msg_sender()));
            }            
            revert(MissingRole(message: "Unknown role", role, account: ctx.msg_sender())) ;
        }
    }
    
       
    // /**
    // * @dev Revokes `role` from `account`.
    // *
    // * If `account` had been granted `role`, emits a {RoleRevoked} event.
    // *
    // * Requirements:
    // *
    // * - the caller must have ``role``'s admin role.
    // *
    // * May emit a {RoleRevoked} event.
    // */
    //function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {
    //    _revokeRole(role, account);
    //}
    pub fn revoke_role(mut self, mut ctx: Context, role: bytes32, account: address) {
        assert self._has_role(role: self._get_role_admin(role), account: ctx.msg_sender()), "Missing admin role"
        self._revoke_role(ctx, role, account) ;
    }
    
    fn _revoke_role(mut self, mut ctx: Context, role: bytes32, account: address) {
        if (self._has_role(role,account) == true) {
            if (role == self.SNAPSHOT_ROLE) {
                self._snapshot_roles[account] = false;
                ctx.emit(RoleRevoked(role: self.SNAPSHOT_ROLE, account, sender: ctx.msg_sender()));
            }
            if (role == self.PAUSER_ROLE) {
                self._pauser_roles[account] = false;
                ctx.emit(RoleRevoked(role: self.PAUSER_ROLE, account, sender: ctx.msg_sender()));
            }
            if (role == self.MINTER_ROLE) {
                self._minter_roles[account] = false;
                ctx.emit(RoleRevoked(role: self.MINTER_ROLE, account, sender: ctx.msg_sender()));
            }
            revert(MissingRole(message: "Unknown role", role, account: ctx.msg_sender())) ;
        }
    }    
    
    // /**
    // * @dev Revokes `role` from the calling account.
    // *
    // * Roles are often managed via {grantRole} and {revokeRole}: this function's
    // * purpose is to provide a mechanism for accounts to lose their privileges
    // * if they are compromised (such as when a trusted device is misplaced).
    // *
    // * If the calling account had been revoked `role`, emits a {RoleRevoked}
    // * event.
    // *
    // * Requirements:
    // *
    // * - the caller must be `account`.
    // *
    // * May emit a {RoleRevoked} event.
    // */
    //function renounceRole(bytes32 role, address account) public virtual override {
    //    require(account == _msgSender(), "AccessControl: can only renounce roles for self");
    //
    //    _revokeRole(role, account);
    //}
    pub fn renounce_role(mut self, mut ctx: Context, role: bytes32, account: address) {
        assert account == ctx.msg_sender(), "AccessControl: can only renounce roles for self"
        self._revoke_role(ctx,role,account) ;
    }
    
    
    ///**
    // * @dev Modifier that checks that an account has a specific role. Reverts
    // * with a standardized message including the required role.
    // *
    // * The format of the revert reason is given by the following regular expression:
    // *
    // *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/
    // *
    // * _Available since v4.1._
    // */
    //modifier onlyRole(bytes32 role) {
    //    _checkRole(role);
    //    _;
    //}
    fn _only_role(self, mut ctx: Context, role: bytes32) {
        self._check_role(role, account: ctx.msg_sender());
    }
    
    // /**
    // * @dev Revert with a standard message if `account` is missing `role`.
    // *
    // * The format of the revert reason is given by the following regular expression:
    // *
    // *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/
    // */
    //function _checkRole(bytes32 role, address account) internal view virtual {
    //    if (!hasRole(role, account)) {
    //        revert(
    //            string(
    //                abi.encodePacked(
    //                    "AccessControl: account ",
    //                    StringsUpgradeable.toHexString(account),
    //                    " is missing role ",
    //                    StringsUpgradeable.toHexString(uint256(role), 32)
    //                )
    //            )
    //        );
    //    }
    //}
    fn _check_role(self, role: u256, account: address) {
        if (self._has_role(role, account) == false) {
            revert(MissingRole(message: "Missing role", role, account)) ;
        }
    }
    
    // /**
    // * @dev Returns `true` if `account` has been granted `role`.
    // */
    //function hasRole(bytes32 role, address account) public view virtual override returns (bool) {
    //    return _roles[role].members[account];
    //}
    fn _has_role(self, role: bytes32, account: address) -> bool {
        if (role == self.SNAPSHOT_ROLE) {
            return self._snapshot_roles[account];
        }
        if (role == self.PAUSER_ROLE) {
            return self._pauser_roles[account];
        }
        if (role == self.MINTER_ROLE) {
            return self._minter_roles[account];
        }
        return false ;
    }

    // /**
    // * @dev Returns the admin role that controls `role`. See {grantRole} and
    // * {revokeRole}.
    // *
    // * To change a role's admin, use {_setRoleAdmin}.
    // */
    //function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {
    //    return _roles[role].adminRole;
    //}
    fn _get_role_admin(self, role: bytes32) -> bytes32 {    
        if (role == self.SNAPSHOT_ROLE) {
            return self._snapshot_admin_role ;
        }
        if (role == self.PAUSER_ROLE) {
            return self._pauser_admin_role ;
        }
        if (role == self.MINTER_ROLE) {
            return self._minter_admin_role ;
        }
        return 0xffffffffffffffffffffffffffffffffffffffff ;
    }
    
    // /**
    // * @dev Sets `adminRole` as ``role``'s admin role.
    // *
    // * Emits a {RoleAdminChanged} event.
    // */
    //function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {
    //    bytes32 previousAdminRole = getRoleAdmin(role);
    //    _roles[role].adminRole = adminRole;
    //    emit RoleAdminChanged(role, previousAdminRole, adminRole);
    //}
    fn _set_role_admin(mut self, mut ctx: Context, role: bytes32 , admin_role: bytes32) {
        let previous_admin_role: bytes32 = self._get_role_admin(role);
        if (role == self.SNAPSHOT_ROLE) {
            self._snapshot_admin_role = admin_role;
        }
        if (role == self.PAUSER_ROLE) {
            self._pauser_admin_role = admin_role ;
        }
        if (role == self.MINTER_ROLE) {
            self._minter_admin_role = admin_role ;
        }    
        ctx.emit(RoleAdminChanged(role, previous_admin_role, admin_role));
    }
    
    
    //====================================== ERC 20 ==========================

    // Upgradeable 

    ///** @dev Creates `amount` tokens and assigns them to `account`, increasing
    // * the total supply.
    // *
    // * Emits a {Transfer} event with `from` set to the zero address.
    // *
    // * Requirements:
    // *
    // * - `account` cannot be the zero address.
    // */
    //function _mint(address account, uint256 amount) internal virtual {
    //    require(account != address(0), "ERC20: mint to the zero address");
    //
    //    _beforeTokenTransfer(address(0), account, amount);
    //
    //    _totalSupply += amount;
    //    unchecked {
    //        // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.
    //        _balances[account] += amount;
    //    }
    //    emit Transfer(address(0), account, amount);

    //    _afterTokenTransfer(address(0), account, amount);
    //}
     fn _mint(mut self, mut ctx: Context, account: address, amount: u256) {
         assert ctx.msg_sender() != address(0), "ERC20: mint to the zero address"
         self._beforeTokenTransfer(ctx, from: address(0), to: account, amount) ;
         self._totalSupply += amount ;
         self._balances[account] += amount ;
         ctx.emit (Transfer(from: address(0),to: account, value: amount)) ;
     }
    
    // /**
    // * @dev See {ERC20-_beforeTokenTransfer}.
    // *
    // * Requirements:
    // *
    // * - the contract must not be paused.
    // */
    //function _beforeTokenTransfer(
    //    address from,
    //    address to,
    //    uint256 amount
    //) internal virtual override {
    //    super._beforeTokenTransfer(from, to, amount);
    // 
    //    require(!paused(), "ERC20Pausable: token transfer while paused");
    //}
    fn _beforeTokenTransfer(self, mut ctx: Context, from: address, to: address, amount: u256) {
        
        
    } 
    
    // ERC20 API
    //function name() public view returns (string)
    //function symbol() public view returns (string)
    //function decimals() public view returns (uint8)
    //function totalSupply() public view returns (uint256)
    //function balanceOf(address _owner) public view returns (uint256 balance)
    //function transfer(address _to, uint256 _value) public returns (bool success)
    //function transferFrom(address _from, address _to, uint256 _value) public returns (bool success)
    //function approve(address _spender, uint256 _value) public returns (bool success)
    //function allowance(address _owner, address _spender) public view returns (uint256 remaining)
    
    
    pub fn name(self) -> String<100> {
        return self._name.to_mem();
    }
    
    pub fn symbol(self) -> String<3> {
        return self._symbol.to_mem() ;
    }
    
    pub fn decimals(self) -> u8 {
        return 18; // Eth to Wei. The age of majority used in the majority.
    }
    
    pub fn totalSupply(self) -> u256 {
        return self._totalSupply ;
    }
    
    pub fn balanceOf(self, owner: address) -> u256 {
        return self._balances[owner] ;
    }
    
    pub fn transfer(mut self, to: address, value: u256) -> bool {
        // dummy 
    
        return true ;
    } 
    
    pub fn transferFrom(mut self, from: address, to: address, value: u256) -> bool {
        // dummy 
        return true ;
    }
    
    pub fn approve(mut self, spender: address, value: u256) -> bool {
        // dummy
    
        return true ;
    }
    
    pub fn allowance(mut self, owner: address, spender: address) -> u256 {
        // dummy
        
        return 0 ;
    }
    
    
}










































